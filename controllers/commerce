const { commerceModel, userModel } = require('../models')
const { handleHttpError } = require('../utils/handleError')
const { matchedData } = require('express-validator')
const { tokenSign2 } = require("../utils/handleJwt")
/**
 * Obtener lista de la base de datos
 * @param {*} req 
 * @param {*} res 
 */
const getCommerces = async (req, res) => {
  try{
      let query = commerceModel.find({}).select('-name -cif -address -email -phone')
      
      if (req.query.scoring === 'true') {
          query = query.sort({ scoring: -1 })
      }

      const data = await query.exec()
      res.send({data})
  }catch(err){
      //console.log(err) //Opcional
      //handleHttpError(res, 'ERROR_GET_ITEMS', 404)
      handleHttpError(res, 'ERROR_GET_ITEMS') //Si nos sirve el de por defecto que hemos establecido, no es necesario pasar el 403
  }
}
const getActivityByCity = async (req, res) => {
  try {
    const { city } = req.params; // Suponiendo que la ciudad se pasa como par치metro en la URL
    
    const activities = await commerceModel.find({ city }).select('-name -cif -address -email -phone');

    res.send({ data: activities });
    } catch (err) {
    handleHttpError(res, 'ERROR_GET_ITEMS'); // Si nos sirve el de por defecto que hemos establecido, no es necesario pasar el 403
    }
}


const getActivityByCityAndActivity = async (req, res) => {
  try {
    const { city,activity } = req.params; // Suponiendo que la ciudad se pasa como par치metro en la URL
    
    const activities = await commerceModel.find({ city , activity}).select('-name -cif -address -email -phone');

    res.send({ data: activities });
    } catch (err) {
    handleHttpError(res, 'ERROR_GET_ITEMS'); // Si nos sirve el de por defecto que hemos establecido, no es necesario pasar el 403
    }
}


const getCommerce = async (req, res) => {
  try{
      const {id} = matchedData(req) //Me quedo solo con el id
      const data = await commerceModel.findById(id)
      res.send(data)
  } catch(err){
      //console.log(err)
      handleHttpError(res, "ERROR_GET_ITEM")
  }
}


const getActivity=async(req,res)=>{
  try{
    const {id} = matchedData(req) //Me quedo solo con el id
    const data = await commerceModel.findById(id).select('-name -cif -address -email -phone')
    res.send(data)
} catch(err){
    //console.log(err)
    handleHttpError(res, "ERROR_GET_ITEM")
}
}

/**
 * Encargado de registrar un nuevo usuario
 * @param {*} req 
 * @param {*} res 
 */
const registerCtrl = async (req, res) => {
    try {
        req = matchedData(req)
        const body = {...req} // Con "..." duplicamos el objeto y le a침adimos o sobreescribimos una propiedad
        console.log(body);
        const dataCommerce = await commerceModel.create(body)
        //Si no queremos que se devuelva el hash con "findOne", en el modelo de users ponemos select: false en el campo password
        //Adem치s, en este caso con "create", debemos setear la propiedad tal que:  
        

        const data = {
            token: await tokenSign2(dataCommerce),
            //user: dataUser
            commerce:dataCommerce
        }
        res.send(data)  
    }catch(err) {
        console.log(err)
        handleHttpError(res, "ERROR_REGISTER_COMMERCE")
    }
}
const deleteCommerce = async (req, res) => {
  try {
      cif=req.body.cif
      const commerce = await commerceModel.findOne({ cif });
      
      if (!commerce) {
        return handleHttpError(res, "COMMERCE NOT FOUND");
      }

      await commerceModel.deleteOne({ cif });
      res.send("THE COMMERCE HAS BEEN DELETED")  

  } catch(err) {
      console.log(err)
      handleHttpError(res, "ERROR CIF NOT MATCHED")
  }
}

const updateCommerce = async (req, res) => {
  try {
    const {id, ...body} = matchedData(req); //Extrae el id y el resto lo asigna a la constante body
    console.log(id);
    delete body.cif;
    const data = await commerceModel.findOneAndUpdate({_id: id}, body, {new: true});
    res.send(data);    
  } catch(err){
    handleHttpError(res, 'ERROR_UPDATE_ITEMS');
  }
}



/**
 * Actualizar un resitro
 * @param {*} req 
 * @param {*} res 
 */
const registerActivity = async (req, res) => {
    try {
        
        id=req.commerce._id

        const data = await commerceModel.findOneAndUpdate(id, req.body);
        res.send(data)    
    }catch(err){
        //console.log(err) 
        handleHttpError(res, 'ERROR_UPDATE_ITEMS')
    }
}

const deleteActivity= async (req, res) => {
   
    try {
      id=req.commerce._id
      const commerce = await commerceModel.findById(id);
  
      // Verificar si el Commerce existe
      if (!commerce) {
        return res.status(404).json({ msg: 'Commerce no encontrado' });
      }
  
      // Eliminar los campos especificados
      commerce.review = undefined;
      commerce.numberOfRatings = undefined;
      commerce.scoring = undefined;
      commerce.photos = undefined;
      commerce.texts = undefined;
      commerce.summary = undefined;
      commerce.title = undefined;
      commerce.activity = undefined;
      commerce.city = undefined;
  
      // Guardar el Commerce actualizado
      await commerce.save();
  
      res.json({ msg: 'Campos eliminados exitosamente' });
    } catch (error) {
      console.error(error.message);
      res.status(500).send('Error del servidor');
    }
}

const getUsersFromMyCity =async (req, res) =>{
  city=req.commerce.city;
  Interest=req.commerce.activity
  try {
    const users = await userModel.find({
      $and: [{ city: city }, { oferts: true },{ Interest: Interest }]
    }).select('-password -_id');
    res.status(200).json(users);
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Error finding users by city and oferts' });
  }
};



const addText = async (req, res) => {

    try {
      const id=req.commerce._id
      const { text } = req.body;
  
      const commerce = await commerceModel.findOneAndUpdate(
        { _id: id },
        { $push: { texts: text } },
        { new: true }
      );
  
      if (!commerce) {
        return res.status(404).json({ error: 'Commerce not found' });
      }
  
      return res.json({ commerce });
    } catch (error) {
      console.error(error);
      return res.status(500).json({ error: 'Server error' });
    }
  
}
const uploadImage=async (req,res)=>{
    const id=req.commerce._id
    const {body,file}=req
    const fileData= {
        filename: file.filename,
        url: process.env.PUBLIC_URL+"/"+file.filename
    }
    const commerce = await commerceModel.findOneAndUpdate(
        { _id: id },
        { $push: { photos: fileData.url } },
        { new: true }
      );
    res.send(commerce)
}



const rateCommerce=async (req,res)=>{

  const { cif } = req.params;
  const { review, score } = req.body;
  console.log(cif)
  try {
    // Find the commerce document by CIF
    const commerce = await commerceModel.findOne({ cif });

    if (!commerce) {
      return res.status(404).json({ error: 'Commerce not found' });
    }

    // Update the commerce document with the new review
  
    if(!commerce.numberOfRatings){
        commerce.numberOfRatings=0;
    }
    if(!commerce.scoring){
        commerce.scoring=0;
    }
    const numberOfRatings = commerce.numberOfRatings + 1;
    
    const review = req.body.review
    const score=req.body.score
    const newScoring = (commerce.scoring * commerce.numberOfRatings + score) / numberOfRatings;

    await commerceModel.findOneAndUpdate({ cif }, {
      numberOfRatings,
      $push: { review: review },
      scoring: newScoring,
    });

    // Return the updated commerce document
    const updatedCommerce = await commerceModel.findOne({ cif });
    return res.json(updatedCommerce);
  } catch (error) {
    console.error(error);
    return res.status(500).json({ error: 'Server error' });
  }
}
    






module.exports = {getActivity,getCommerce,getActivityByCityAndActivity,getActivityByCity,deleteActivity,getUsersFromMyCity, getCommerces,updateCommerce,deleteCommerce, registerCtrl,registerActivity,addText,uploadImage,rateCommerce };